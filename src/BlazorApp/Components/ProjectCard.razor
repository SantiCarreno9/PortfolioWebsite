<div class="custom-container" @ref=component>
    <div class="media-container">
        <div class="media-content-container">
            @if (!string.IsNullOrEmpty(currentMediaContent.Item2))
            {
                @GetContentToDisplay(currentMediaContent)
            }
        </div>
        <div class="thumbnails-scroller">
            @if (Project.MediaContent != null)
            {
                @foreach (int i in Enumerable.Range(0, mediaContent.Count))
                {
                    <div class="thumbnail @(currentMediaIndex==i?"active":"")" @onclick="()=>SelectContent(i)">                        
                        @if (mediaContent[i].Item1 == MediaContentType.Image)
                        {
                            <img src="@mediaContent[i].Item2" />                            
                        }
                        else
                        {
                            @* @GetThumbnail(mediaContent[i].Item2) *@
                            <i class="far fa-play-circle"></i>
                        }                        
                    </div>
                }
            }
        </div>
    </div>
    <div class="description">
        <h3 style="text-align:left">@Project.Title</h3>
        <br>
        @Project.Description
        @if (Project.BulletItems != null)
        {
            <ul>
                @foreach (var item in Project.BulletItems)
                {
                    <li>@item</li>
                }
            </ul>
        }
    </div>
</div>

<script src="../Components/ProjectCard.razor.js"></script>

@code {

    private RenderFragment GetContentToDisplay((MediaContentType, string) content)
    {
        switch (content.Item1)
        {
            case MediaContentType.Image:
                return @<img class="media-content" src=@content.Item2 />;
            case MediaContentType.Video:
                return
                @<video class="media-content" controls @ref=videoPlayer>
                    <source src="@content.Item2" type="video/mp4">
                </video>;
            case MediaContentType.ShortVideo:
                return@<video id="short-video" class="media-content" src=@content.Item2 autoplay muted loop playsinline preload="auto" @ref=shortVideoPlayer />;
            case MediaContentType.WebVideo:
                return@<iframe class="media-content" src=@content.Item2 loading="lazy" allowfullscreen="" @ref=iFramePlayer />;
            default:
                return@<></>;
        }
    }

    private RenderFragment GetThumbnail(string path)
    {
        if (path.Contains("*THMB*"))
        {
            var thumbnailSrc = path.Split("*THMB*");
            if (thumbnailSrc.Length > 1)
                return@< img src = "@(path[1])" />;
        }
        return null;
    }
}
