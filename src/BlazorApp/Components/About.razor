<section id="about">
    <a href="#about">
        <h2>About me</h2>
    </a>
    <div class="custom-container">
        <div class="picture">
            <img src="images/ProfilePicture.jpeg" />
        </div>
        <div class="description">
            @if (aboutMe is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <p>@((MarkupString)aboutMe.Description)</p>
                <hr />
                @foreach (var key in aboutMe.Skills.Keys)
                {
                    <h3>@key</h3>
                    <ul>
                        @foreach (var values in aboutMe.Skills[key])
                        {
                            <li>@values</li>
                        }
                    </ul>
                }
            }
        </div>
    </div>
    <div class="container d-flex flex-column">
        @if (educationEntries != null)
        {
            <h2>My Education</h2>
            <br>
            @foreach (var entry in educationEntries)
            {
                <ProfileEntryComponent Entry="entry"></ProfileEntryComponent>
            }
        }
        <br>
        @if (experienceEntries != null)
        {
            <h2>My Professional Experience</h2>
            <br>
            @foreach (var entry in experienceEntries)
            {
                <ProfileEntryComponent Entry="entry"></ProfileEntryComponent>
            }
        }
        <br>
        @if (projectEntries != null)
        {
            <h2>My Projects</h2>
            <br>
            @foreach (var entry in projectEntries)
            {
                <ProfileEntryComponent Entry="entry"></ProfileEntryComponent>
            }
        }
    </div>
</section>

@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    private List<ProfileEntry>? profileEntries;
    private AboutMe? aboutMe;
    private HeroImage? hero;

    private List<ProfileEntry>? educationEntries;
    private List<ProfileEntry>? experienceEntries;
    private List<ProfileEntry>? projectEntries;

    protected override async Task OnInitializedAsync()
    {
        aboutMe = await Http.GetFromJsonAsync<AboutMe>(Path.Combine(GlobalValues.JsonPath, "aboutme.json"));
        profileEntries = await Http.GetFromJsonAsync<List<ProfileEntry>>(Path.Combine(GlobalValues.JsonPath, "profileentries.json"));

        if (profileEntries == null)
            return;
        educationEntries = profileEntries.Where(pe => pe.Category == ProfileEntryCategory.Education).ToList();
        experienceEntries = profileEntries.Where(pe => pe.Category == ProfileEntryCategory.WorkExperience).ToList();
        projectEntries = profileEntries.Where(pe => pe.Category == ProfileEntryCategory.Project).ToList();
    }
}
